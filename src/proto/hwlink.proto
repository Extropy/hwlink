// compile with protoc --proto_path=src/proto/ --python_out=hostsw/ hwlink.proto
//              protoc --proto_path=src/proto/ --cpp_out=src/ hwlink.proto
syntax = "proto3";

package hwlink;

message digitalin {                     // coap endpont getdigitalin, streamdigitalin
  uint32 bitnumber = 1;                 // required for request and reponse
  bool bitvalue = 2;                    // required for response
  string streamdigitalinendpoint = 3;   // required for streamdigitalin
  bool startdigitalinstream = 4;        // optional for streamdigitalin, default = true, false = stop stream
}

message digitalout {                    // coap endpoint setdigitalout - no response
  uint32 bitnumber = 1;                 // required for request
  bool bitvalue = 2;                    // required for request  
}

message analogin {                      // coap endpoint getanalogin, streamanalogin
  uint32 analoginnumber = 1;            // required for request and response
  double calibratedanaloginvalue = 2;   // required for response if !requestrawanalogin
  uint64 rawanaloginvalue = 3;          // required for response if requestrawanalogin
  bool requestrawanalogin = 4;          // not required, default = false
  string streamanaloginendpoint = 5;    // required for streamanalogin
  bool startanaloginstream = 6;         // optional for streamdigitalin, default = true, false = stop stream
}

message analogout {                     // coap endpoint setanalogout - no response
  uint32 analogoutnumber = 1;           // required for request
  double calibratedanalogoutvalue = 2;  // required for request if !setrawanalogoutvalue
  uint64 rawanalogoutvalue = 3;         // required for request if setrawanalogoutvalue
}

message pwmout {                        // coap endpoint setpwmout - no response
  uint32 pwnoutnumber = 1;              // requried for request
  double relativepwmvalue = 2;          // required for request if !setaltpwmspec
  uint64 pwmrange = 3;                  // required for request if setaltpwmspec
  uint64 pwmon = 4;                     // required for request if setaltpwmspec
  bool setaltpwmspec = 5;               // optional for request, default = false
}

message i2cdata {                       // coap endpoint readi2c, writei2c, readwritei2c, streami2c
  uint32 i2caddress = 1;                // required for request and response
  uint32 i2cnbytes = 2;                 // required for readi2c, writereadi2c request, readi2c, writereadi2c response
  bytes i2cdata = 3;                    // required for writei2c, writereadi2c request, readi2c, writereadi2c response
  string streami2cendpoint = 4;         // required for streami2c
  bool starti2cstream = 5;              // optional for streami2c, default = true, false = stop stream
}

message spidata {                       // coap endpoint readspi, writespi, readwritespi, streamspi
  uint32 spichipselect = 1;             // required for request and response
  uint32 spinbytes = 2;                 // required for readspi, writereadspi request, readspi, writereadspi response
  bytes spidata = 3;                    // required for writespi, writereadspi request, readspi, writereadspi response
  string streamspiendpoint = 4;         // required for streamspi
  bool startspistream = 5;              // optional for streamspi, default = true, false = stop stream
}
